import dotenv from 'dotenv';
dotenv.config();

import express, { Request, Response, NextFunction } from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import cookieParser from 'cookie-parser';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ä–æ—É—Ç—ã
import authRouter from './routes/auth';
import placesRouter from './routes/places';
import tourTypesRouter from './routes/tourType';
import tripRouter from './routes/trip';
import reviewRouter from './routes/rewiew';

const app = express();

// 1. –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('Environment variables:');
console.log(`CLIENT_URL: ${process.env.CLIENT_URL}`);
console.log(`PORT: ${process.env.PORT}`);
console.log(`NODE_ENV: ${process.env.NODE_ENV}`);

// 2. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
const allowedDomains = [
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  /https?:\/\/localhost(:\d+)?$/,
  /https?:\/\/127\.0\.0\.1(:\d+)?$/,
  
  // –í—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã Vercel
  /https?:\/\/([a-z0-9-]+\.)?reimagined-octo-sniffle(-[a-z0-9]+)?\.vercel\.app$/i,
  
  // –î–æ–º–µ–Ω Render
  /https?:\/\/reimagined-octo-sniffle\.onrender\.com$/i,
  
  // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
  new RegExp(`^${process.env.CLIENT_URL?.replace(/\./g, '\\.')}$`)
].filter(Boolean);

// 3. –£–ª—É—á—à–µ–Ω–Ω—ã–π CORS-–º–∏–¥–ª–≤–∞—Ä—å
const corsOptions: cors.CorsOptions = {
  origin: (origin, callback) => {
    try {
      // –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (Postman, curl)
      if (!origin) {
        console.log('[CORS] Allowed: No origin');
        return callback(null, true);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
      const isAllowed = allowedDomains.some(domain => domain.test(origin));
      
      if (isAllowed) {
        console.log(`[CORS] Allowed: ${origin}`);
        return callback(null, true);
      } else {
        console.warn(`[CORS] Blocked: ${origin}`);
        return callback(new Error(`Origin '${origin}' not allowed by CORS`), false);
      }
    } catch (error) {
      console.error('[CORS] Error:', error);
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['Content-Length', 'X-Powered-By'],
  maxAge: 600
};

app.use(cors(corsOptions));

// 4. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', cors(corsOptions));

// 5. JSON-–ø–∞—Ä—Å–µ—Ä –¥–ª—è body
app.use(express.json());

// 6. Cookie-–ø–∞—Ä—Å–µ—Ä
app.use(cookieParser());

// 7. Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req: Request, res: Response, next: NextFunction) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path} Origin: ${req.headers.origin || 'none'}`);
  next();
});

// 8. –ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (_req: Request, res: Response) => {
  res.send('‚úÖ API is running');
});

// 9. –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
app.use('/api/auth', authRouter);
app.use('/api/places', placesRouter);
app.use('/api/tour-types', tourTypesRouter);
app.use('/api/trips', tripRouter);
app.use('/api/reviews', reviewRouter);

// 10. Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404
app.use((_req: Request, res: Response) => {
  res.status(404).json({ message: 'Route not found' });
});

// 11. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err: any, req: Request, res: Response, _next: NextFunction) => {
  console.error(`[ERROR] ${req.method} ${req.path}`, err);
  res.status(err.status || 500).json({
    message: err.message || 'Internal Server Error',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// 12. –ü–æ–¥–∫–ª—é—á–∞–µ–º Mongo –∏ —Å—Ç–∞—Ä—Ç—É–µ–º
mongoose
  .connect(process.env.MONGO_URI!)
  .then(() => {
    console.log('‚úÖ MongoDB connected');
    const port = process.env.PORT || 4000;
    app.listen(port, () => {
      console.log(`üöÄ Server listening on port ${port}`);
      console.log(`üåê Allowed CORS domains: ${allowedDomains.map(d => d.toString()).join(', ')}`);
    });
  })
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
  });