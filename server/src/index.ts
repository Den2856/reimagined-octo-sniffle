import dotenv from 'dotenv';
dotenv.config();

import express, { Request, Response, NextFunction } from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import cookieParser from 'cookie-parser';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ä–æ—É—Ç—ã
import authRouter from './routes/auth';
import placesRouter from './routes/places';
import tourTypesRouter from './routes/tourType';
import tripRouter from './routes/trip';
import reviewRouter from './routes/rewiew';

const app = express();

// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
const vercelPattern = /https?:\/\/([a-z0-9-]+\.)?reimagined-octo-sniffle(-[a-z0-9]+)?\.vercel\.app/i;
const renderPattern = /https?:\/\/([a-z0-9-]+\.)?reimagined-octo-sniffle\.onrender\.com/i;

// 1) JSON-–ø–∞—Ä—Å–µ—Ä –¥–ª—è body
app.use(express.json());

// 2) Cookie-–ø–∞—Ä—Å–µ—Ä
app.use(cookieParser());

// 3) CORS —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π origin
app.use(cors({
  origin: (origin, callback) => {
    // –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (Postman, curl –∏ —Ç.–¥.)
    if (!origin) {
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
    if (origin.includes('localhost') || origin.includes('127.0.0.1')) {
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
    if (origin === process.env.CLIENT_URL) {
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã Vercel
    if (vercelPattern.test(origin)) {
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω Render
    if (renderPattern.test(origin)) {
      return callback(null, true);
    }
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    console.warn(`CORS blocked: ${origin}`);
    callback(new Error(`Origin '${origin}' not allowed by CORS`));
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', cors());

// 4) –ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (_req: Request, res: Response) => {
  res.send('‚úÖ API is running');
});

// 5) –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
app.use('/api/auth', authRouter);
app.use('/api/places', placesRouter);
app.use('/api/tour-types', tourTypesRouter);
app.use('/api/trips', tripRouter);
app.use('/api/reviews', reviewRouter);

// 6) –ì–ª–æ–±–∞–ª—å–Ω—ã–π error‚Äêhandler
app.use((
  err: any,
  _req: Request,
  res: Response,
  _next: NextFunction
) => {
  console.error(err);
  res.status(err.status || 500).json({ message: err.message || 'Server Error' });
});

// 7) –ü–æ–¥–∫–ª—é—á–∞–µ–º Mongo –∏ —Å—Ç–∞—Ä—Ç—É–µ–º
mongoose
  .connect(process.env.MONGO_URI!)
  .then(() => {
    console.log('‚úÖ MongoDB connected');
    const port = process.env.PORT || 4000;
    app.listen(port, () => {
      console.log(`üöÄ Server listening on port ${port}`);
    });
  })
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
  });