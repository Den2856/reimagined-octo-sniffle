import dotenv from 'dotenv';
dotenv.config();

import express, { Request, Response, NextFunction } from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import cookieParser from 'cookie-parser';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ä–æ—É—Ç—ã
import authRouter from './routes/auth';
import placesRouter from './routes/places';
import tourTypesRouter from './routes/tourType';
import tripRouter from './routes/trip';
import reviewRouter from './routes/rewiew';

const app = express();

// 1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω Vercel
const FRONTEND_URL = 'https://reimagined-octo-sniffle-chi.vercel.app';

// 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–º–µ–Ω–∞
app.use(cors({
  origin: FRONTEND_URL, // –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['Content-Length', 'X-Powered-By'],
  maxAge: 600
}));

// 3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', cors());

// 4. JSON-–ø–∞—Ä—Å–µ—Ä –¥–ª—è body
app.use(express.json());

// 5. Cookie-–ø–∞—Ä—Å–µ—Ä
app.use(cookieParser());

// 6. Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req: Request, res: Response, next: NextFunction) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path} 
  Origin: ${req.headers.origin || 'none'} 
  Host: ${req.headers.host}`);
  next();
});

// 7. –ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (_req: Request, res: Response) => {
  res.send('‚úÖ API is running');
});

// 8. –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
app.use('/api/auth', authRouter);
app.use('/api/places', placesRouter);
app.use('/api/tour-types', tourTypesRouter);
app.use('/api/trips', tripRouter);
app.use('/api/reviews', reviewRouter);

// 9. Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404
app.use((_req: Request, res: Response) => {
  res.status(404).json({ message: 'Route not found' });
});

// 10. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err: any, req: Request, res: Response, _next: NextFunction) => {
  console.error(`[ERROR] ${req.method} ${req.path}`, err);
  res.status(err.status || 500).json({
    message: err.message || 'Internal Server Error'
  });
});

// 11. –ü–æ–¥–∫–ª—é—á–∞–µ–º Mongo –∏ —Å—Ç–∞—Ä—Ç—É–µ–º
mongoose
  .connect(process.env.MONGO_URI!)
  .then(() => {
    console.log('‚úÖ MongoDB connected');
    const port = process.env.PORT || 4000;
    app.listen(port, () => {
      console.log(`üöÄ Server listening on port ${port}`);
      console.log(`üåê Allowed CORS domain: ${FRONTEND_URL}`);
    });
  })
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
  });